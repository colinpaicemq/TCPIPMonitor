 // Main routine to capture TCPIP port  statistics and print them out
 //
 /**************************************************************
 MIT License
 Copyright (c) 2024 Colin Paice
 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:
 The above copyright notice and this permission notice shall be included in all
 copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 SOFTWARE.
 * Contributors:
 *   Colin Paice - Initial Contribution
 ************************************************************/
 #pragma comment (copyright,"Copyright:Colin Paice.  Version 1.1")

 #pragma runopts(POSIX(ON))
 int debug=0;
 /*Include standard libraries */
 #define _LARGE_TIME_API
 #include <time.h>
 #define _XOPEN_SOURCE_EXTENDED 1
 #undef _ALL_SOURCE
 #include <sys/time.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
 #include <stdarg.h>
 #include <EZBNMRHC.h>
 #include <printhx.h>
 #include <getip.h>
 #define _OPEN_SYS_SOCK_IPV6
 #include <arpa/inet.h>

FILE * fINFO = 0;
FILE * fCHANGE = 0;

  #include <MONCONN.h>
  #include <checknwm.h>
  #define _POSIX_SOURCE
  #include <unistd.h>
int main( int argc, char *argv??(??))
{
//int IPType  =0;
  int iSleep = 60;
  int count =  50;
  int iArg;
  int bufferSize = 8192;
  int port;
  struct sockaddr_in6 ip6;
  short prefix;
  char *  pIP = 0;
  fINFO  = fopen("DD:INFO","w");
  fCHANGE   = fopen("DD:CHANGE","w");
  char * pJobname = "TCPIP";
  if (argc == 1)
  {
    printf("Syntax %s --PORT  --SLEEP n --COUNT n --TCPIP name "
           "--IP value \n"
           "Where --IP value is remote IP address of format:"
           " 10.1.1.2  10.1.1.2/16 2001:1::7 or 2001:1::/64\n",
            argv[0]);
  }
  for (iArg = 1;iArg< argc; iArg ++   )
  {
    if (strcmp(argv[iArg],"--SLEEP") == 0
       && iArg + 1 < argc ) // so we have a parm after kw
    {
      iSleep     = atoi(argv[iArg+1]);
      iArg ++;
      continue;
    }
    else
    //  the remote IP address or prefix
    if (strcmp(argv[iArg],"--IP") == 0
       && iArg + 1 < argc ) // so we have a parm after kw
    {

      int rc;
      rc = getIP(argv[iArg+1],
                 &ip6,
                 &prefix);
      if ( rc > 0) return rc;
      pIP = argv[iArg+1];
      iArg ++;
      continue;
    }
    else
    if (strcmp(argv[iArg],"--PORT") == 0
       && iArg + 1 < argc ) // so we have a parm after kw
    {
      port  = atoi(argv[iArg+1]);
      iArg ++;
      continue;
    }
    else
    if (strcmp(argv[iArg],"--BUFFERSIZE") == 0
       && iArg + 1 < argc ) // so we have a parm after kw
    {
      bufferSize =  atoi(argv[iArg+1]);
      iArg ++;
      continue;
    }
    else
    if (strcmp(argv[iArg],"--COUNT") == 0
       && iArg + 1 < argc ) // so we have a parm after kw
    {
      count     = atoi(argv[iArg+1]);
      iArg ++;
      continue;
    }
    else
    if (strcmp(argv[iArg],"--TCPIP") == 0
       && iArg + 1 < argc ) // so we have a rm after kw
    {
      pJobname  =      argv[iArg+1] ;
      if (strlen(pJobname) > 8)
      {
        printf("--TCPIP value too long\n");
        return 8;
      }
      iArg ++;
      continue;
    }
  }
  if (port == 0)
  {
     printf("Please specify a --port value\n");
     return 8;
  }
  else
  if (port > 0xffff )
  {
     printf("Please specify a valid --port value. Range 1 - 65535\n");
     return 8;
  }
  if (iSleep < 1) iSleep = 10;
  printf("Using --PORT %i --SLEEP %i --COUNT %i --TCPIP %s\n",
          port,iSleep,count,pJobname);
  char * p;
  p        =malloc(bufferSize);

  //struct {
  //         NWMHeader NMIheader;
  //         NWMFilter NMIfilter[2];
  //         char returned[1024];
  //       } NMIbuftype;
  //  Jobname needs to be padded with blanks to 8 chars
  char JobName[8];
  memset(&JobName[0],' ',sizeof(JobName));
  strncpy(&JobName[0],pJobname,strlen(pJobname));

  NWMHeader * pH  ;
  NWMRecHeader * pRH         ;
  // address the header over the malloced storage
  pH = (NWMHeader *)p;
  // initialise the values
  pH->NWMHeaderIdent = NWMHEADERIDENTIFIER;
  pH->NWMHeaderLength= sizeof(NWMHeader);
  pH->NWMVersion = NWMCURRENTVER;
  //
  // we need to set up the interface data
  // set up the Request header triplet
  //
  pH ->NWMInputDataDescriptors. NWMFiltersDesc.NWMTOffset =
           sizeof(NWMHeader);   // it follows the header
  pH -> NWMInputDataDescriptors.NWMFiltersDesc.NWMTLength=
            sizeof(NWMFilter);
  pH-> NWMInputDataDescriptors. NWMFiltersDesc.NWMTNumber=1;
  NWMFilter * pF;
  // address the filter past the header
  pF = (NWMFilter *)(p + sizeof(NWMHeader));

  pF -> NWMFilterIdent = NWMFILTERIDENTIFIER;
  pF -> NWMFilterFlags = NWMFILTERLCLPORTMASK; // local port only

  // specify the port
  pF -> NWMFilterLocal. NWMFilterLocalAddr6.sin6_family=AF_INET6;
  pF -> NWMFilterLocal.NWMFilterLocalAddr6.sin6_port=port;
  if ( pIP != 0) //  we were passed an IP address
  {
     pF -> NWMFilterFlags |= NWMFILTERRMTADDRMASK; // remote address
    // getIP above returned the structure with the IP address and prefix
    memcpy(&pF ->  NWMFilterRemote.  NWMFilterRemoteAddr6,
           &ip6,sizeof(struct sockaddr_in6));
    if (prefix != 0)
    {
      pF -> NWMFilterFlags |= NWMFILTERRMTPFXMASK ; // mask value
      pF -> NWMFilterRemotePrefix  =prefix;
    }
//  else
//  {
//  }
  }
// pF -> NWMFilterLocal. NWMFilterLocalAddr4.sin_family=AF_INET;
// pF -> NWMFilterLocal.NWMFilterLocalAddr4.sin_port=22  ;
// pF -> NWMFilterLocal.NWMFilterLocalAddr4.sin_addr.s_addr
//   = 0x0a010102;    // ip 10.1.1.2
  unsigned int RequestResponseBufferAlet = 0;

  int rv=0;
  int rc =0 ;
  unsigned int rs = 0;

  // print the header  for the CSV data
  printf("HH:MM:SS,remote              ,"
  "BytesI,BytesO,,SegsI , SegsO,,"
  "BI/Sec,BO/Sec,,ReXmtC,\n");

  // for as many times as requested
  for (int iLoop = 0;iLoop < count+1 ; iLoop ++)
  {
     // record the time now so we can purge old entries
     time_t timeNow;
     timeNow = time(NULL); // get time now
     pH->NWMType    = NWMTCPCONNTYPE; // say we want  connection detail
     NWMServices(JobName,
       p,            // the data
       &RequestResponseBufferAlet, // 0 for ours
       &bufferSize,
       &rv,
       &rc,
       &rs);
     checkNWMServices(rv,rc,rs);
     if (rc != 0) break;

     // the number of records we have in the data
     int cSections = pH->  NWMOutputDesc. NWMQNumber;
     // point to the output record data within the buffer
     pRH = (NWMRecHeader * )(p + pH-> NWMOutputDesc.NWMQOffset);
     // now iterate over the sections of connection data
     int c;
     for (c=0;c< cSections ;c++)
     {
       MONCONN((char *) pRH,pH-> NWMOutputDesc.NWMQLength);
       pRH = (NWMRecHeader * )((char *) pRH  +
                      pH-> NWMOutputDesc.NWMQLength);
     }  // for section times
     MONCONNClear(timeNow);  // delete unused entries not updated
     sleep(iSleep);
  } // for iLoop times
}
